language: shell
matrix:
  fast_finish: true
  include:
    - name: "Windows qiling cygwin"
      os: windows
      language: c
      compiler:
        - gcc
      env:
        - PATH=$PATH:/usr/local/opt/binutils/bin
      script:
        - choco install --no-progress -y cygwin cyg-get
        - cyg-get.bat default autoconf automake make gcc-core clang pkg-config libpcre-devel cmake python3-setuptools python3-wheel python3-magic ruby wget
        - cd $TRAVIS_BUILD_DIR && git clone -b dev https://github.com/chfl4gs/qiling
        - export SHELLOPTS && set -o igncr && cmd.exe //C "C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd /cygdrive/$TRAVIS_BUILD_DIR/qiling; python3 -m ensurepip; pip3 install --upgrade pip; pip3 install .'"
        - cd $TRAVIS_BUILD_DIR/qiling 
        - cmd.exe //C 'examples\scripts\dllscollector.bat'
        - cd $TRAVIS_BUILD_DIR/qiling/examples/rootfs/x86_windows/bin
        - unzip -Pinfected wannacry.bin.zip
        - unzip -Pinfected UselessDisk.bin.zip
        - unzip -Pinfected GandCrab502.bin.zip
        - unzip -Pinfected al-khaser.bin.zip
        - cmd.exe //C "C:\\tools\\cygwin\\bin\\bash.exe -lc 'cd /cygdrive/$TRAVIS_BUILD_DIR/qiling/tests; python test_pe.py; ./test_elf.sh'"
        
#    - name: "Python 3.5 on Linux"
#      os: linux
#      dist: bionic
#      language: python
#      python: "3.5"
#      install:
#        - pip3 install -r requirements.txt
#        - python3 setup.py install
#      before_script:
#        - pysite=$(python3 -m sysconfig | sed -n '/purelib/ s/.*\= *//p' | xargs); cp ${pysite}${pysite}/keystone/libkeystone.so $pysite/keystone/
#        - cd tests
#      script:
#        - ./test_nix.sh

#    - name: "Python 3.6 on Linux"
#      os: linux
#      dist: bionic
#      language: python
#      python: "3.6"
#      install:
#        - pip3 install -r requirements.txt
#        - python3 setup.py install
#      before_script:
#        - pysite=$(python3 -m sysconfig | sed -n '/purelib/ s/.*\= *//p' | xargs); cp ${pysite}${pysite}/keystone/libkeystone.so $pysite/keystone/
#        - cd tests
#      script:
#        - ./test_nix.sh

#    - name: "Unicorn: MacOSX brew"
#      os: osx
#      osx_image: xcode11.3
#      python: 3.7
#      before_cache:
#        - brew cleanup
#      before_install:
#        - cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core && git stash && git clean -d -f
#        - brew unlink python
#        - brew uninstall pathon@2
#        - brew update
#      install:
#        - brew link --overwrite python
#        - brew install --HEAD unicorn 
#      script:
#        - brew reinstall python; brew reinstall pyenv; pyenv install 3.7.7 
#        - brew uninstall python@2 
#        - brew link --overwrite python; brew install --HEAD unicorn
#        - brew test unicorn

#    - name: "Python 3.7 on OSX"
#      os: osx
#      osx_image: xcode10.1
#      language: shell
#      before_install:
#        - pip3 install --upgrade pip
#        - git clone -b dev https://github.com/qilingframework/qiling.git
#        - cd qiling && git fetch origin pull/439/head:pr439
#        - git checkout pr439
#      install:
#        #- travis_wait pip3 install 'capstone>=4.0.1' 'pefile>=2019.4.18' 'python-registry>=1.3.1' 'unicorn==1.0.2rc1'
#        - cd qiling && pip3 install -r requirements.txt
#        - git clone https://github.com/keystone-engine/keystone
#        - cd keystone
#        - mkdir build
#        - cd build
#        - ../make-share.sh
#        - make -j8
#        - sudo make install
#        - cd ../bindings/python
#        - sudo make install
#        - pip install .
#        - man find
#        - cd $TRAVIS_BUILD_DIR; cat collectdylib.sh; ./collectdylib.sh; ls -lah qiling/examples/rootfs/x8664_macos/usr/lib/
#        - cd qiling
#        - python3 setup.py install
#      before_script:
#        - ./examples/scripts/collectdylib.sh
#        - cd tests
#      script:
#        - ./test_macho.sh
#      before_script:
#        cd tests
#      script:
#        - ./test_nix.sh
#        - python3 test_macho_macos.py
        
#    - name: "Python 3.6.8 on Windows"
#      os: windows
#      language: shell
#      env:
#        - PATH="/c/Python36:/c/Python36/Scripts:$PATH"
#      before_install:
#        - git clone https://github.com/qilingframework/qiling.git
#        - cd qiling
#        #- choco install python
#        #- choco install kb2999226
#        #- python -m pip install --upgrade pip
#      install:
#        - pip install 'capstone>=4.0.1' 'pefile>=2019.4.18' 'python-registry>=1.3.1' 'unicorn>=1.0.2rc1'
#        - git clone https://github.com/keystone-engine/keystone
#        - cd keystone
#        - mkdir build
#        - cd build
#        - cmd.exe //C 'C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat' amd64 '&' cmd.exe //C '..\nmake-dll.bat' '&&' nmake install
#        - cd ../bindings/python
#        - python setup.py install
#        - cd $TRAVIS_BUILD_DIR
#        - python setup.py install
#        - cp /c/Program\ Files\ \(x86\)/keystone/lib/keystone.dll /c/Python36/Lib/site-packages/keystone/
#      before_script:
#        - cmd.exe //C 'examples\scripts\dllscollector.bat'
#        - sha256sum examples/rootfs/x8664_windows/Windows/System32/*
#        - sha256sum examples/rootfs/x86_windows/Windows/SysWOW64/*
#        - cd $TRAVIS_BUILD_DIR/examples/rootfs/x86_windows/bin
#        - unzip -Pinfected wannacry.bin.zip
#        - unzip -Pinfected UselessDisk.bin.zip
#        #- unzip -Pinfected GandCrab.bin.zip
#        - unzip -Pinfected GandCrab502.bin.zip
#        - cd $TRAVIS_BUILD_DIR/tests
#      script:
#         - ls -laR /c/windows/SysWOW64/
#        - python test_pe_nu.py
#        - python test_peshellcode_nu.py
#
#    - name: "Python 3.6 on Docker"
#      services:
#        - docker
#      before_install:
#        - docker build -t qiling:1.0 .
#      script:
#        - docker run qiling:1.0 /bin/bash -c "cd tests && ./test_nix.sh"
#
##    - name: "Python 3.6 on WSL1 Ubuntu"
#      os: windows
#      language: shell
#      before_install:
#        - choco install wsl-ubuntu-1804
#        - wsl apt update
#        - wsl DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y
#        - wsl DEBIAN_FRONTEND=noninteractive apt install -y python3-pip cmake
#        - wsl pip3 install --upgrade pip
#      install:
#        - wsl pip3 install -r requirements.txt
#        - wsl python3 setup.py install
#      before_script:
#        - MSYS_NO_PATHCONV=1 wsl cp $(wsl python3 -c "import site; print(site.getsitepackages()[0])")$(wsl python3 -c "import site; print(site.getsitepackages()[1])")/keystone/libkeystone.so $(wsl python3 -c "import site; print(site.getsitepackages()[0])")/keystone/
#        - cd tests
#      script:
#        - wsl python3 test_all.py
#    - name: "Linux Cmake 64bit"
#      os: linux
#      compiler: gcc
#      env:
#        - PATH=$PATH:/usr/local/opt/binutils/bin
#      script:
#        - git clone https://github.com/chfl4gs/unicorn.git
#        - cd unicorn
#        - mkdir build
#        - cd build
#        - ../cmake.sh
#        - cp libunicorn.* ../
#        - make -C ../tests/unit test && make -C ../tests/regress test
#      addons:
#        apt:
#          packages:
#            - libcmocka-dev

#    - name: "Windows MSYS2/MinGW64"
#      os: windows
#      language: shell
#      env:
#        - PATH=/C/tools/msys64/mingw64/bin:$PATH
#      before_install:
#        - |
#          if [[ ! -f /C/tools/msys64/msys2_shell.cmd ]]; then
#               rm -rf /C/tools/msys64
#          fi
#        - choco uninstall -y mingw
#        - choco upgrade --no-progress -y msys2
#        - export msys2='cmd //C RefreshEnv.cmd '
#        - export msys2+='& set MSYS=winsymlinks:nativestrict '
#        - export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
#        - export shell="$msys2 -mingw64 -full-path -here -c \$\* --"
#        - export msys2+=" -msys2 -c \$\* --"
#        - $msys2 pacman --sync --noconfirm --needed \
#                autoconf \
#                automake \
#                make \
#                perl \
#                python \
#                mingw-w64-x86_64-libtool \
#                mingw-w64-x86_64-toolchain \
#                mingw-w64-x86_64-cmake \
#                mingw-w64-x86_64-cmocka \
#                mingw-w64-x86_64-python3-setuptools
#                unzip
#        - export CPPFLAGS=-D__USE_MINGW_ANSI_STDIO=1
#        - export CC=x86_64-w64-mingw32-gcc
#        - export AR=gcc-ar
#        - export RANLIB=gcc-ranlib
#      before_cache:
#        - $msys2 pacman --sync --clean --noconfirm
#      cache:
#        directories:
#          - $HOME/AppData/Local/Temp/chocolatey
#          - /C/tools/msys64
#      script:
#        - git clone https://github.com/chfl4gs/unicorn.git
#        - cd unicorn
#        - $shell make; cp unicorn.dll /C/Windows/System32/; $shell make test
#cache:
#  directories:
#    - $HOME/Library/Caches/Homebrew
#    - /usr/local/Homebrew
#
#  allow_failures:
#    - os: osx
#    - services: docker
